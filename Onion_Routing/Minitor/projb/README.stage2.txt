a. For stage 2, I continued to use the sendto/recvfrom code from beej's guide in the stage 2 listen functions in each class. In my Router class, I copied the in_cksum function from the ping.c file provided to us. Proxy's tun_alloc function was copied from the backreference.org tunnel tutorial provided to us in the project description http://backreference.org/2010/03/26/tuntap-interface-tutorial/ . Proxy's listenStage2 function is based on backreference's examples on setting up a tunnel interface and select() function examples. The line with the select function itself was adapted from https://support.sas.com/documentation/onlinedoc/sasc/doc700/html/lr2/select.htm , as the equivalent line from backreference's tutorial was not working properly.

b. This stage is almost working. The proxy successfully uses a select statement to be able to read either from the tunnel or the socket. It can send the icmp echo request packets to the router via udp and receive the replies. The router correctly makes the icmp echo reply packet and its corresponding ip header. The output logfiles also are generated correctly. The failure is in writing back to the tunnel. Oddly enough, network analyzers such as Wireshark show that my program is inserting the reply packets into the tunnel, but the terminal that I launched the ping command in is not receiving the reply packets. Example shown here http://qikdrop.com/uploads/ch0602/paub116nk32tw00ma4qgjxo97u4e5.png .

c. In addition to the portability concerns in stage 1, stage 2 has an additional concern in checksum generation in the router. Ip header and icmp header checksum generation use bit shifting and store the result in an integer. Using big endian or little endian ordering for integers could make the checksum generation produce different outputs. Although I don't have code to support this, I did write code during program tests that tells me if the checksum I generated for received packets is the same as the checksum that they had beforehand. That way, I was able to figure out what order I need to insert an integer's into the header's checksum field. If I expanded this code, I could use it to detect what endian the current system uses and then use that information to read/write packet information correctly.
